//@version=5
strategy("Estrategia Estoc√°stico - Cuenta Fondeo", 
         shorttitle="Stoch Funded", 
         overlay=false,
         default_qty_type=strategy.percent_of_equity,
         default_qty_value=10,
         commission_type=strategy.commission.percent,
         commission_value=0.0)

// === PAR√ÅMETROS SIMPLES ===
// Configuraci√≥n del Estoc√°stico
stoch_length = input.int(14, title="Longitud Estoc√°stico", minval=5, maxval=50)
smooth_k = input.int(3, title="Suavizado %K", minval=1, maxval=10)
smooth_d = input.int(3, title="Suavizado %D", minval=1, maxval=10)

// Niveles de entrada y salida
nivel_compra = input.float(20.0, title="Nivel de Compra (%)", minval=5, maxval=40)
nivel_venta = input.float(80.0, title="Nivel de Venta (%)", minval=60, maxval=95)

// Control de trades
max_trades_dia = input.int(1, title="M√°ximo Trades por D√≠a", minval=1, maxval=10)

// FILTRO DE HORARIO - Solo operar en horario de Madrid menos vol√°til
hora_inicio = input.int(7, title="Hora Inicio (Madrid)", minval=0, maxval=23)
hora_fin = input.int(16, title="Hora Fin (Madrid)", minval=0, maxval=23)

// REGLAS DE CUENTA DE FONDEO
max_perdida_diaria = input.float(3.0, title="M√°x. P√©rdida Diaria (%)", minval=1.0, maxval=5.0, step=0.1)
max_perdida_total = input.float(6.0, title="M√°x. P√©rdida Total (%)", minval=3.0, maxval=10.0, step=0.1)
capital_inicial = input.float(100000, title="Capital Inicial (para c√°lculos)", minval=10000, step=1000)

// GESTI√ìN DE RIESGO OBLIGATORIA
stop_loss_percent = input.float(2.5, title="Stop Loss (%)", minval=1.0, maxval=4.0, step=0.1)
usar_take_profit = input.bool(false, title="Usar Take Profit Opcional")
take_profit_percent = input.float(6.0, title="Take Profit (%)", minval=2.0, maxval=15, step=0.5)

// PROTECCI√ìN ADICIONAL CONTRA GAPS
max_perdida_por_trade = input.float(3.0, title="M√°x. P√©rdida por Trade (%)", minval=2.0, maxval=5.0, step=0.1)

// Opciones de trading
permitir_longs = input.bool(true, title="Permitir Compras (Long)")
permitir_shorts = input.bool(false, title="Permitir Ventas (Short)")

// === C√ÅLCULOS ===
// Indicador Estoc√°stico
k = ta.stoch(close, high, low, stoch_length)
k_smooth = ta.sma(k, smooth_k)
d_smooth = ta.sma(k_smooth, smooth_d)

// Control de horario - M√©todo m√°s robusto
// Usar timestamp completo para mayor precisi√≥n
current_time = time
hora_actual = hour(current_time, "Europe/Madrid")  // Usar directamente la zona horaria de Madrid

// Verificaci√≥n de horario permitido - M√°s estricta
horario_permitido = hora_actual >= hora_inicio and hora_actual < hora_fin  // Cambio <= por <

// Tambi√©n verificar que no sea fin de semana
dia_semana = dayofweek(current_time, "Europe/Madrid")
es_dia_laborable = dia_semana >= 2 and dia_semana <= 6  // Lunes a Viernes

// Filtro combinado
trading_activo = horario_permitido and es_dia_laborable

// Control de trades diarios
var int trades_hoy = 0
var float perdida_diaria = 0.0
var float perdida_total_acumulada = 0.0
var float equity_inicio_dia = 0.0

// Resetear contador cada d√≠a
if ta.change(time("1D"))
    trades_hoy := 0
    equity_inicio_dia := strategy.equity
    perdida_diaria := 0.0

// Calcular p√©rdidas
if strategy.equity < equity_inicio_dia
    perdida_diaria := (equity_inicio_dia - strategy.equity) / capital_inicial * 100

perdida_total_acumulada := (capital_inicial - strategy.equity) / capital_inicial * 100

// VERIFICACIONES DE SEGURIDAD PARA CUENTAS DE FONDEO
limite_diario_alcanzado = perdida_diaria >= max_perdida_diaria
limite_total_alcanzado = perdida_total_acumulada >= max_perdida_total
cuenta_protegida = limite_diario_alcanzado or limite_total_alcanzado

// === CONDICIONES DE ENTRADA CON FILTRO HORARIO ===
// Condici√≥n de compra: %K cruza hacia arriba el nivel de compra + filtro horario
condicion_compra = permitir_longs and 
                   ta.crossover(k_smooth, nivel_compra) and 
                   trades_hoy < max_trades_dia and
                   strategy.position_size == 0 and
                   not cuenta_protegida and
                   trading_activo  // FILTRO HORARIO MEJORADO

// Condici√≥n de venta: %K cruza hacia abajo el nivel de venta + filtro horario
condicion_venta = permitir_shorts and 
                  ta.crossunder(k_smooth, nivel_venta) and 
                  trades_hoy < max_trades_dia and
                  strategy.position_size == 0 and
                  not cuenta_protegida and
                  trading_activo  // FILTRO HORARIO MEJORADO

// === CONDICIONES DE SALIDA ===
// Salir de posici√≥n larga cuando %K cruza hacia abajo el nivel de venta
salida_long = strategy.position_size > 0 and ta.crossunder(k_smooth, nivel_venta)

// Salir de posici√≥n corta cuando %K cruza hacia arriba el nivel de compra
salida_short = strategy.position_size < 0 and ta.crossover(k_smooth, nivel_compra)

// === EJECUCI√ìN DE √ìRDENES ===
// Entrar en posici√≥n larga
if condicion_compra
    strategy.entry("Long", strategy.long, comment="BUY " + str.tostring(k_smooth, "#.#") + " H" + str.tostring(hora_actual))
    trades_hoy += 1

// Entrar en posici√≥n corta
if condicion_venta
    strategy.entry("Short", strategy.short, comment="SELL " + str.tostring(k_smooth, "#.#") + " H" + str.tostring(hora_actual))
    trades_hoy += 1

// STOP LOSS OBLIGATORIO Y MEJORADO para todas las posiciones
if strategy.position_size > 0  // Posici√≥n Long
    // Stop loss principal
    stop_price = strategy.position_avg_price * (1 - stop_loss_percent/100)
    // Stop loss de emergencia (m√°s estricto)
    emergency_stop = strategy.position_avg_price * (1 - max_perdida_por_trade/100)
    stop_final = math.max(stop_price, emergency_stop)
    
    limit_price = usar_take_profit ? strategy.position_avg_price * (1 + take_profit_percent/100) : na
    strategy.exit("SL Long", "Long", stop=stop_final, limit=limit_price, comment="SL " + str.tostring(stop_loss_percent) + "%")
    
    // Cierre forzado si la p√©rdida actual excede el l√≠mite
    perdida_actual = (strategy.position_avg_price - close) / strategy.position_avg_price * 100
    if perdida_actual >= max_perdida_por_trade
        strategy.close("Long", comment="EMERGENCY STOP " + str.tostring(perdida_actual, "#.#") + "%")

if strategy.position_size < 0  // Posici√≥n Short
    // Stop loss principal
    stop_price = strategy.position_avg_price * (1 + stop_loss_percent/100)
    // Stop loss de emergencia
    emergency_stop = strategy.position_avg_price * (1 + max_perdida_por_trade/100)
    stop_final = math.min(stop_price, emergency_stop)
    
    limit_price = usar_take_profit ? strategy.position_avg_price * (1 - take_profit_percent/100) : na
    strategy.exit("SL Short", "Short", stop=stop_final, limit=limit_price, comment="SL " + str.tostring(stop_loss_percent) + "%")
    
    // Cierre forzado si la p√©rdida actual excede el l√≠mite
    perdida_actual = (close - strategy.position_avg_price) / strategy.position_avg_price * 100
    if perdida_actual >= max_perdida_por_trade
        strategy.close("Short", comment="EMERGENCY STOP " + str.tostring(perdida_actual, "#.#") + "%")

// Salir de posici√≥n larga
if salida_long
    strategy.close("Long", comment="Salida Long " + str.tostring(k_smooth, "#.#"))

// Salir de posici√≥n corta
if salida_short
    strategy.close("Short", comment="Salida Short " + str.tostring(k_smooth, "#.#"))

// CIERRE FORZADO SI SE ALCANZAN LOS L√çMITES
if limite_diario_alcanzado and strategy.position_size != 0
    strategy.close_all(comment="L√çMITE DIARIO ALCANZADO")

if limite_total_alcanzado and strategy.position_size != 0
    strategy.close_all(comment="L√çMITE TOTAL ALCANZADO")

// === VISUALIZACI√ìN ===
// L√≠neas del estoc√°stico
plot(k_smooth, color=color.blue, title="%K", linewidth=2)
plot(d_smooth, color=color.red, title="%D", linewidth=1)

// Niveles importantes
hline(nivel_compra, "Nivel Compra", color=color.green, linestyle=hline.style_dashed)
hline(nivel_venta, "Nivel Venta", color=color.red, linestyle=hline.style_dashed)
hline(50, "L√≠nea Media", color=color.gray, linestyle=hline.style_dotted)

// Zonas de color
bgcolor(k_smooth > nivel_venta ? color.new(color.red, 90) : na, title="Zona Sobrecompra")
bgcolor(k_smooth < nivel_compra ? color.new(color.green, 90) : na, title="Zona Sobreventa")

// Se√±ales en el gr√°fico
plotshape(condicion_compra, style=shape.triangleup, location=location.bottom, 
          color=color.green, size=size.small, title="Se√±al Compra")
plotshape(condicion_venta, style=shape.triangledown, location=location.top, 
          color=color.red, size=size.small, title="Se√±al Venta")

// Alertas visuales para l√≠mites
bgcolor(limite_diario_alcanzado ? color.new(color.red, 70) : na, title="L√≠mite Diario")
bgcolor(limite_total_alcanzado ? color.new(color.purple, 70) : na, title="L√≠mite Total")
bgcolor(not trading_activo ? color.new(color.gray, 95) : na, title="Fuera de Horario")  // Indicar cuando est√° fuera de horario

// === TABLA DE INFORMACI√ìN MEJORADA ===
var table tabla_info = table.new(position.top_right, 2, 9,  // Aumentamos una fila
                                  bgcolor=color.white, border_width=1)

if barstate.islast
    // Encabezado
    table.cell(tabla_info, 0, 0, "CUENTA FONDEO", bgcolor=color.navy, text_color=color.white)
    table.cell(tabla_info, 1, 0, "ESTADO", bgcolor=color.navy, text_color=color.white)
    
    // Estado de la cuenta
    estado_cuenta = cuenta_protegida ? "üîí BLOQUEADA" : not trading_activo ? "‚è∞ FUERA HORARIO" : "‚úÖ ACTIVA"
    color_estado = cuenta_protegida ? color.red : not trading_activo ? color.orange : color.green
    table.cell(tabla_info, 0, 1, "Estado Cuenta", text_color=color.black)
    table.cell(tabla_info, 1, 1, estado_cuenta, text_color=color_estado)
    
    // Horario actual (NUEVO)
    table.cell(tabla_info, 0, 2, "Hora Madrid", text_color=color.black)
    hora_texto = str.tostring(hora_actual) + ":00"
    hora_color = trading_activo ? color.green : color.red
    table.cell(tabla_info, 1, 2, hora_texto, text_color=hora_color)
    
    // P√©rdida diaria
    table.cell(tabla_info, 0, 3, "P√©rdida Diaria", text_color=color.black)
    perdida_text = str.tostring(perdida_diaria, "#.##") + "%"
    perdida_color = perdida_diaria >= max_perdida_diaria * 0.8 ? color.red : 
                   perdida_diaria >= max_perdida_diaria * 0.5 ? color.orange : color.green
    table.cell(tabla_info, 1, 3, perdida_text, text_color=perdida_color)
    
    // P√©rdida total
    table.cell(tabla_info, 0, 4, "P√©rdida Total", text_color=color.black)
    total_text = str.tostring(perdida_total_acumulada, "#.##") + "%"
    total_color = perdida_total_acumulada >= max_perdida_total * 0.8 ? color.red : 
                 perdida_total_acumulada >= max_perdida_total * 0.5 ? color.orange : color.green
    table.cell(tabla_info, 1, 4, total_text, text_color=total_color)
    
    // Informaci√≥n de trading
    table.cell(tabla_info, 0, 5, "Stoch %K", text_color=color.black)
    table.cell(tabla_info, 1, 5, str.tostring(k_smooth, "#.##") + "%", text_color=color.black)
    
    table.cell(tabla_info, 0, 6, "Trades Hoy", text_color=color.black)
    table.cell(tabla_info, 1, 6, str.tostring(trades_hoy) + "/" + str.tostring(max_trades_dia), text_color=color.black)
    
    table.cell(tabla_info, 0, 7, "Posici√≥n", text_color=color.black)
    posicion_texto = strategy.position_size > 0 ? "LONG" : strategy.position_size < 0 ? "SHORT" : "SIN POSICI√ìN"
    posicion_color = strategy.position_size > 0 ? color.green : strategy.position_size < 0 ? color.red : color.black
    table.cell(tabla_info, 1, 7, posicion_texto, text_color=posicion_color)
    
    table.cell(tabla_info, 0, 8, "Stop Loss", text_color=color.black)
    table.cell(tabla_info, 1, 8, str.tostring(stop_loss_percent) + "% / " + str.tostring(max_perdida_por_trade) + "%", text_color=color.red)
